{"ast":null,"code":"let store = {\n  _state: {\n    profilePage: {\n      posts: [{\n        id: 1,\n        message: 'Hi, how are you?',\n        likesCount: 12\n      }, {\n        id: 2,\n        message: 'It\\'s my first post',\n        likesCount: 11\n      }],\n      newPostText: 'it'\n    },\n    messagePage: {\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'How are you?'\n      }, {\n        id: 3,\n        message: 'Yo'\n      }],\n      dialogs: [{\n        id: 1,\n        name: 'Vladislav'\n      }, {\n        id: 2,\n        name: 'Andrey'\n      }, {\n        id: 3,\n        name: 'Svetlana'\n      }, {\n        id: 4,\n        name: 'Ekaterina'\n      }, {\n        id: 5,\n        name: 'Mihail'\n      }]\n    }\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  _callSubscriber() {\n    console.log('State changed');\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === 'ADD-POST') {\n      let newPost = {\n        id: 5,\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.posts.push(newPost);\n\n      this._callSubscriber(this._state);\n    } else if (action.type === 'UPDATE-NEW-POST-TEXT') {\n      this._state.profilePage.newPostText = action.newText;\n\n      this._callSubscriber(this._state);\n    }\n  }\n\n};\nexport const addPostActionCreator = () => {\n  return {\n    type: 'ADD-POST'\n  };\n};\nexport const updateNewPostTextActionCreator = text => {\n  return {\n    type: 'UPDATE-NEW-POST-TEXT',\n    newText: text\n  };\n};\nexport default store;","map":{"version":3,"sources":["C:/Users/rolan/OneDrive/Рабочий стол/lesson/my-app/src/redux/state.js"],"names":["store","_state","profilePage","posts","id","message","likesCount","newPostText","messagePage","messages","dialogs","name","getState","_callSubscriber","console","log","subscribe","observer","dispatch","action","type","newPost","push","newText","addPostActionCreator","updateNewPostTextActionCreator","text"],"mappings":"AAEA,IAAIA,KAAK,GAAG;AACRC,EAAAA,MAAM,EAAE;AAEJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EAAE,CACH;AAACC,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,kBAAjB;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OADG,EAEH;AAACF,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,qBAAjB;AAAwCC,QAAAA,UAAU,EAAE;AAApD,OAFG,CADE;AAKTC,MAAAA,WAAW,EAAE;AALJ,KAFT;AASJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,QAAQ,EAAE,CACN;AAACL,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OADM,EAEN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAFM,EAGN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAHM,CADD;AAMTK,MAAAA,OAAO,EAAE,CACL;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQO,QAAAA,IAAI,EAAE;AAAd,OADK,EAEL;AAACP,QAAAA,EAAE,EAAE,CAAL;AAAQO,QAAAA,IAAI,EAAE;AAAd,OAFK,EAGL;AAACP,QAAAA,EAAE,EAAE,CAAL;AAAQO,QAAAA,IAAI,EAAE;AAAd,OAHK,EAIL;AAACP,QAAAA,EAAE,EAAE,CAAL;AAAQO,QAAAA,IAAI,EAAE;AAAd,OAJK,EAKL;AAACP,QAAAA,EAAE,EAAE,CAAL;AAAQO,QAAAA,IAAI,EAAE;AAAd,OALK;AANA;AATT,GADA;;AA0BRC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKX,MAAZ;AACH,GA5BO;;AA6BRY,EAAAA,eAAe,GAAG;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,GA/BO;;AAgCRC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,SAAKJ,eAAL,GAAuBI,QAAvB;AACH,GAlCO;;AAqCRC,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,QAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,UAAIC,OAAO,GAAG;AACVjB,QAAAA,EAAE,EAAE,CADM;AAEVC,QAAAA,OAAO,EAAE,KAAKJ,MAAL,CAAYC,WAAZ,CAAwBK,WAFvB;AAGVD,QAAAA,UAAU,EAAE;AAHF,OAAd;;AAKA,WAAKL,MAAL,CAAYC,WAAZ,CAAwBC,KAAxB,CAA8BmB,IAA9B,CAAmCD,OAAnC;;AACA,WAAKR,eAAL,CAAqB,KAAKZ,MAA1B;AACH,KARD,MAQO,IAAIkB,MAAM,CAACC,IAAP,KAAgB,sBAApB,EAA2C;AAC9C,WAAKnB,MAAL,CAAYC,WAAZ,CAAwBK,WAAxB,GAAsCY,MAAM,CAACI,OAA7C;;AACA,WAAKV,eAAL,CAAqB,KAAKZ,MAA1B;AACH;AACA;;AAlDG,CAAZ;AAsDA,OAAO,MAAMuB,oBAAoB,GAAG,MAAM;AACtC,SAAM;AACFJ,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJM;AAMP,OAAO,MAAMK,8BAA8B,GAAIC,IAAD,IAAU;AACpD,SAAO;AACHN,IAAAA,IAAI,EAAE,sBADH;AAC4BG,IAAAA,OAAO,EAAEG;AADrC,GAAP;AAGH,CAJM;AAKP,eAAe1B,KAAf","sourcesContent":["\r\n\r\nlet store = {\r\n    _state: {\r\n\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n                {id: 2, message: 'It\\'s my first post', likesCount: 11}\r\n            ],\r\n            newPostText: 'it'\r\n        },\r\n        messagePage: {\r\n            messages: [\r\n                {id: 1, message: 'Hi'},\r\n                {id: 2, message: 'How are you?'},\r\n                {id: 3, message: 'Yo'}\r\n            ],\r\n            dialogs: [\r\n                {id: 1, name: 'Vladislav'},\r\n                {id: 2, name: 'Andrey'},\r\n                {id: 3, name: 'Svetlana'},\r\n                {id: 4, name: 'Ekaterina'},\r\n                {id: 5, name: 'Mihail'}\r\n            ]\r\n        }\r\n\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    _callSubscriber() {\r\n        console.log('State changed')\r\n    },\r\n    subscribe(observer) {\r\n        this._callSubscriber = observer;\r\n    },\r\n\r\n\r\n    dispatch(action) {\r\n        if (action.type === 'ADD-POST') {\r\n            let newPost = {\r\n                id: 5,\r\n                message: this._state.profilePage.newPostText,\r\n                likesCount: 0\r\n            };\r\n            this._state.profilePage.posts.push(newPost);\r\n            this._callSubscriber(this._state);\r\n        } else if (action.type === 'UPDATE-NEW-POST-TEXT'){\r\n            this._state.profilePage.newPostText = action.newText;\r\n            this._callSubscriber(this._state);\r\n        }\r\n        }\r\n\r\n\r\n}\r\nexport const addPostActionCreator = () => {\r\n    return{\r\n        type: 'ADD-POST'\r\n    }\r\n}\r\n\r\nexport const updateNewPostTextActionCreator = (text) => {\r\n    return {\r\n        type: 'UPDATE-NEW-POST-TEXT' , newText: text\r\n    }\r\n}\r\nexport default store;"]},"metadata":{},"sourceType":"module"}